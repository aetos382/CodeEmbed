<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>

<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml.Linq" #>

<#+
    private static string ToCamelCase(string value)
    {
        var chars = value.ToCharArray();

        chars[0] = char.ToLowerInvariant(value[0]);

		return new string(chars);
    }

    private static string ToSnakeCase(string value)
    {
        var builder = new StringBuilder();

        foreach (char c in value)
        {
            if (char.IsUpper(c))
            {
                if (builder.Length > 0)
                {
                    builder.Append('_');
                }

                builder.Append(char.ToLowerInvariant(c));
            }
            else
            {
                builder.Append(c);
            }
        }

        return builder.ToString();
    }

    private const string GeneratedModelPostfix = "";

    private class MemberDefinition
    {
        public string Name { get; private set; }
		public string Type { get; private set; }
		public string Json { get; private set; }
		public string ModelType { get; private set; }
		public bool Required { get; private set; }
		public string CamelCasedName { get; private set; }

        public static MemberDefinition Parse(XElement element)
        {
            var def = new MemberDefinition
                {
                    Name = element.Attribute("name").Value,
                    Type = element.Attribute("type").Value,
                    ModelType = (string)element.Attribute("modelType"),
					Required = (bool?)element.Attribute("required") ?? false
                };

            string json = (string)element.Attribute("json");
            if (json == null)
            {
                json = ToSnakeCase(def.Name);
            }

            def.Json = json;

            if (def.ModelType != null)
            {
                string type = def.Type;

                int[] position = def.ModelType.Split(',').Select(x => int.Parse(x.Trim())).ToArray();

                int index = position[0];
                int length = position[1];

                def.Type = string.Format(
                    "{0}I{1}{2}{3}",
                    type.Substring(0, index),
                    type.Substring(index, length),
					GeneratedModelPostfix,
                    type.Substring(index + length));
            }

            def.CamelCasedName = ToCamelCase(def.Name);

            return def;
        }

        public static IEnumerable<MemberDefinition> ParseModel(XElement element)
        {
			var ns = (XNamespace)"http://schemas.aerie.jp/codeembed/github-models-v3";

            return element.Descendants(ns + "Member").Select(Parse).ToArray();
        }
    }
#>
