<#@ template debug="false" hostspecific="false" language="C#" #>

<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>

<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>

<#@ parameter name="CodeNamespace" type="System.String" #>
<#@ parameter name="ModelDefinitionXml" type="System.String" #>

<#@ include file="ModelGeneratorTool.ttinclude" #>

<#
    var modelDefinition = XElement.Parse(ModelDefinitionXml);

    string modelName = (string)modelDefinition.Attribute("name");

    var members = modelDefinition.Descendants("Member")
		.Select(MemberDefinition.Parse);
#>

namespace <#= CodeNamespace #>.Models.Contracts
{
	using System;
	using System.CodeDom.Compiler;
	using System.ComponentModel;
	using System.Diagnostics;
	using System.Diagnostics.Contracts;
	
	[GeneratedCode("ModelContract.tt", "1.0")]
    [DebuggerStepThrough]
    [EditorBrowsable(EditorBrowsableState.Never)]
	[ContractClassFor(typeof(I<#= modelName #><#= GeneratedModelPrefix #>))]
	public abstract class <#= modelName #>Contract<#= GeneratedModelPrefix #>
		: I<#= modelName #><#= GeneratedModelPrefix #>
	{
<#
	foreach (var member in members)
	{
	    if (member.Required)
	    {
#>
		public <#= member.Type #> <#= member.Name #>
		{
			get
			{
				Contract.Ensures(Contract.Result<<#= member.Type #>>() != null);

				throw new NotImplementedException();
			}
		}
<#
	    }
	    else
	    {
#>
		public abstract <#= member.Type #> <#= member.Name #> { get; }
<#
	    }
#>
		
<#
	}
#>
	}
}
