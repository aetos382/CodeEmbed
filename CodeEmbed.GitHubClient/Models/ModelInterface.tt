<#@ template debug="false" hostspecific="false" language="C#" #>

<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>

<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>

<#@ parameter name="CodeNamespace" type="System.String" #>
<#@ parameter name="ModelDefinitionXml" type="System.String" #>
<#@ parameter name="ParentModelDefinitionXmls" type="System.String[]" #>

<#@ include file="ModelDefinitionParser.ttinclude" #>

<#
    var model = Model.Parse(ModelDefinitionXml);
	string modelName = model.Name.LocalName;

    bool hasRequiredMember = model.Members.Any(x => x.Required);

	string genericParameters = string.Empty;

	if (model.GenericParameters.Any())
    {
		genericParameters = "<" + string.Join(", ", model.GenericParameters.Select(x => x.Name)) + ">";
    }
#>

namespace <#= CodeNamespace #>.Models
{
	using System;
	using System.CodeDom.Compiler;
	using System.Collections.Generic;
	using System.Diagnostics.Contracts;
<#
    if (hasRequiredMember)
    {
#>

	using <#= CodeNamespace #>.Models.Contracts;
<#
    }
#>

	[GeneratedCode("ModelInterface.tt", "1.0")]
<#
    if (hasRequiredMember)
    {
#>
	[ContractClass(typeof(<#= modelName #>Contract<#= GeneratedModelPostfix #>))]
<#        
    }
#>
	public partial interface I<#= modelName #><#= GeneratedModelPostfix #><#= genericParameters #>
<#
	foreach (var p in model.GenericParameters)
    {
		if (!p.Constraints.Any())
        {
			continue;
        }
#>
		where <#= p.Name #> : <#= string.Join(", ", p.Constraints.Select(x => x.LocalName)) #>
<#
    }
#>
<#
    if (model.Inherits != null)
    {
#>
		: I<#= model.Inherits.ParsedName #><#= GeneratedModelPostfix #>
<#
    }
#>
	{
<#
	foreach (var member in model.Members)
	{
#>
		/// <summary>Map to "<#= member.Json #>"</summary>
		<#= member.ParsedType #> <#= member.Name #> { [Pure] get; }

<#
	}
#>
	}
}
