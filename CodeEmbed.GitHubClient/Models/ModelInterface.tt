<#@ template debug="false" hostspecific="false" language="C#" #>

<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>

<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>

<#@ parameter name="CodeNamespace" type="System.String" #>
<#@ parameter name="ModelDefinitionXml" type="System.String" #>
<#@ parameter name="ParentModelDefinitionXmls" type="System.String[]" #>

<#@ include file="ModelGeneratorTool.ttinclude" #>

<#
    var modelDefinition = XElement.Parse(ModelDefinitionXml);

    string modelName = (string)modelDefinition.Attribute("name");
    string inherits = (string)modelDefinition.Attribute("inherits");

    var members = MemberDefinition.ParseModel(modelDefinition);

    bool hasRequiredMember = members.Any(x => x.Required);
#>

namespace <#= CodeNamespace #>.Models
{
	using System;
	using System.CodeDom.Compiler;
	using System.Diagnostics.Contracts;
<#
    if (hasRequiredMember)
    {
#>

	using <#= CodeNamespace #>.Models.Contracts;
<#
    }
#>

	[GeneratedCode("ModelInterface.tt", "1.0")]
<#
    if (hasRequiredMember)
    {
#>
	[ContractClass(typeof(<#= modelName #>ContractGenerated))]
<#        
    }
#>
	public interface I<#= modelName #><#= GeneratedModelPrefix #>
<#
    if (inherits != null)
    {
#>
		: I<#= inherits #><#= GeneratedModelPrefix #>
<#
    }
#>
	{
<#
	foreach (var member in members)
	{
#>
		// <#= member.Json #>
		<#= member.Type #> <#= member.Name #> { [Pure] get; }

<#
	}
#>
	}
}
