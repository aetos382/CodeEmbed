<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>

<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>

<#@ include file="ModelGeneratorTool.tt" #>

<#@ parameter name="CodeNamespace" type="System.String" #>
<#@ parameter name="ModelName" type="System.String" #>
<#@ parameter name="InheritFrom" type="System.String" #>
<#@ parameter name="IsInternal" type="System.Boolean" #>
<#@ parameter name="ParentIsInternal" type="System.Boolean" #>
<#@ parameter name="Members" type="System.Collections.Generic.IEnumerable<Tuple<System.String, System.String, System.String, System.String>>" #>

<# if (IsInternal)
{
#>
namespace <#= CodeNamespace #>.Models.Internal
<#
}
else
{
#>
namespace <#= CodeNamespace #>.Models
<#
}
#>
{
	using System;
	using System.CodeDom.Compiler;
	using System.Diagnostics.Contracts;
	
<#
    if (ParentIsInternal && !IsInternal)
    {
#>
	using <#= CodeNamespace #>.Models.Internal;

<#        
    }
#>
	[GeneratedCode("ModelInterface.tt", "1.0")]
	public interface I<#= ModelName #>Generated
<#
    if (InheritFrom != null)
    {
#>
		: I<#= InheritFrom #>Generated
<#
    }
#>
	{
<#
	foreach (var member in Members)
	{
#>
		// <#= member.Item4 #>
		<#= member.Item2 #> <#= member.Item1 #> { [Pure] get; }

<#
	}
#>
	}
}
