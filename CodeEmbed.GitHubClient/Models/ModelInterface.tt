<#@ template debug="false" hostspecific="false" language="C#" #>

<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>

<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>

<#@ parameter name="CodeNamespace" type="System.String" #>
<#@ parameter name="ModelDefinitionXml" type="System.String" #>
<#@ parameter name="ParentModelDefinitionXmls" type="System.String[]" #>

<#@ include file="ModelGeneratorTool.tt" #>

<#
    var modelDefinition = XElement.Parse(ModelDefinitionXml);

    string modelName = (string)modelDefinition.Attribute("name");
    string inherits = (string)modelDefinition.Attribute("inherits");

    bool isInternal = (bool?)modelDefinition.Attribute("internal") ?? false;

    var members = modelDefinition.Descendants("Member").Select(
        x => new MemberDefinition
            {
                Name = x.Attribute("name").Value,
                Type = x.Attribute("type").Value,
                Json = x.Attribute("json").Value
            });

    XElement parentModelDefinition = null;

    bool parentIsInternal = false;

    if (ParentModelDefinitionXmls.Any())
    {
		parentModelDefinition = XElement.Parse(ParentModelDefinitionXmls.First());
        parentIsInternal = (bool?)parentModelDefinition.Attribute("internal") ?? false;
    }
#>

<# if (isInternal)
{
#>
namespace <#= CodeNamespace #>.Models.Internal
<#
}
else
{
#>
namespace <#= CodeNamespace #>.Models
<#
}
#>
{
	using System;
	using System.CodeDom.Compiler;
	using System.Diagnostics.Contracts;
	
<#
    if (parentIsInternal && !isInternal)
    {
#>
	using <#= CodeNamespace #>.Models.Internal;

<#        
    }
#>
	[GeneratedCode("ModelInterface.tt", "1.0")]
	public interface I<#= modelName #>Generated
<#
    if (inherits != null)
    {
#>
		: I<#= inherits #>Generated
<#
    }
#>
	{
<#
	foreach (var member in members)
	{
#>
		// <#= member.Json #>
		<#= member.Type #> <#= member.Name #> { [Pure] get; }

<#
	}
#>
	}
}
