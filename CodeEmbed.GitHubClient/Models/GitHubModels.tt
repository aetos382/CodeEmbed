<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>

<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>

<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>

<#@ include file="ModelGeneratorTool.tt" #>

<#@ output extension=".Generated.cs" #>

<#@ CleanupBehavior processor="T4VSHost" CleanupAfterProcessingtemplate="true" #>

<#
    string baseDirectory = Path.GetDirectoryName(this.Host.TemplateFile);

    string sourceFile = this.Host.ResolvePath("GitHubModels.xml");

    using (var streamReader = new StreamReader(sourceFile))
    {
		IDictionary<string, bool> inheritInternals = new Dictionary<string, bool>();

        var document = XDocument.Load(streamReader);

        string codeNamespace = (string)document.Element("Models").Attribute("codeElement") ?? "CodeEmbed.GitHubClient";

        var modelDefs =
			document.Descendants("Model").ToDictionary(x => x.Attribute("name").Value, x => x);

        foreach (var modelDef in modelDefs.Values)
        {
			var parentElements = new List<XElement>();
            string parentModel = (string)modelDef.Attribute("inherits");

            while (parentModel != null)
            {
                var parentElement = modelDefs[parentModel];
				parentElements.Add(parentElement);

				parentModel = (string)parentElement.Attribute("inherits");
            }

            string interfaceDef = this.GenerateModel("ModelInterface.tt", codeNamespace, modelDef, parentElements);
            this.WriteLine(interfaceDef);

            string classDef = this.GenerateModel("ModelClass.tt", codeNamespace, modelDef, parentElements);
            this.WriteLine(classDef);
            
            string serializableClassDef = this.GenerateModel("SerializableClass.tt", codeNamespace, modelDef, parentElements);
            this.WriteLine(serializableClassDef);
        }
    }
#>

<#+
    private string GenerateModel(
		string templateFile,
		string codeNamespace,
		XElement modelDefinition,
		IEnumerable<XElement> parentModelDefinitions)
    {
        string includeContent, location;
        bool loaded = this.Host.LoadIncludeText(templateFile, out includeContent, out location);
        if (!loaded)
        {
            this.Error(string.Format("Can't load {0}.", templateFile));
            return null;
        }

        var sessionHost = (ITextTemplatingSessionHost)this.Host;

        var session = sessionHost.CreateSession();

        session["CodeNamespace"] = codeNamespace;
        session["ModelDefinitionXml"] = modelDefinition.ToString(SaveOptions.DisableFormatting);
        session["ParentModelDefinitionXmls"] =
            parentModelDefinitions.Select(x => x.ToString(SaveOptions.DisableFormatting)).ToArray();

        sessionHost.Session = session;

        var engine = new Engine();
        string result = engine.ProcessTemplate(includeContent, this.Host);

        return result;
    }
#>
