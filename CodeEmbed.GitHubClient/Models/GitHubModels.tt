<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>

<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>

<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>

<#@ include file="ModelGeneratorTool.tt" #>

<#@ output extension=".Generated.cs" #>

<#@ CleanupBehavior processor="T4VSHost" CleanupAfterProcessingtemplate="true" #>

<#
    string baseDirectory = Path.GetDirectoryName(this.Host.TemplateFile);

    string sourceFile = this.Host.ResolvePath("GitHubModels.xml");

    using (var streamReader = new StreamReader(sourceFile))
    {
		IDictionary<string, bool> inheritInternals = new Dictionary<string, bool>();

        var document = XDocument.Load(streamReader);

        var modelDefs = document.Descendants("Model");
        foreach (var modelDef in modelDefs)
        {
            string modelName = (string)modelDef.Attribute("name");

            bool isInternal = false;

            var internalAttribute = modelDef.Attribute("internal");
            if (internalAttribute != null)
            {
                isInternal = (bool)internalAttribute;
            }

            inheritInternals[modelName] = isInternal;

            string inherits = (string)modelDef.Attribute("inherits");

            bool parentIsInternal = false;

            if (inherits != null)
            {
				parentIsInternal = inheritInternals[inherits];
            }

            bool hasClient = false;

            var hasClientAttribute = modelDef.Attribute("hasClient");
            if (hasClientAttribute != null)
            {
                hasClient = (bool)hasClientAttribute;
            }

            var memberDefs = modelDef.Descendants("Member");

            var members = new List<Tuple<string, string, string, string>>();
            foreach (var memberDef in memberDefs)
            {
                string memberName = (string)memberDef.Attribute("name");
                string memberType = (string)memberDef.Attribute("type");
                string memberJson = (string)memberDef.Attribute("json");
                string camelcasedName = ToCamelCase(memberName);

                var member = Tuple.Create(memberName, memberType, camelcasedName, memberJson);
                members.Add(member);
            }


            string interfaceDef = this.GenerateModel("ModelInterface.tt", modelName, inherits, isInternal, parentIsInternal, hasClient, members, "CodeEmbed.GitHubClient");
            this.WriteLine(interfaceDef);

            string classDef = this.GenerateModel("ModelClass.tt", modelName, inherits, isInternal, parentIsInternal, hasClient, members, "CodeEmbed.GitHubClient");
            this.WriteLine(classDef);
            
            string serializableClassDef = this.GenerateModel("SerializableClass.tt", modelName, inherits, isInternal, parentIsInternal, hasClient, members, "CodeEmbed.GitHubClient");
            this.WriteLine(serializableClassDef);
        }
    }
#>

<#+
    private string GenerateModel(
		string templateFile,
        string modelName,
		string inheritFrom,
        bool isInternal,
		bool parentIsInternal,
		bool hasClient,
        IEnumerable<Tuple<string, string, string, string>> members,
        string codeNamespace)
    {
        string includeContent, location;
        bool loaded = this.Host.LoadIncludeText(templateFile, out includeContent, out location);
        if (!loaded)
        {
            this.Error(string.Format("Can't load {0}.", templateFile));
            return null;
        }

        var sessionHost = (ITextTemplatingSessionHost)this.Host;

        var session = sessionHost.CreateSession();

        session["CodeNamespace"] = codeNamespace;
        session["ModelName"] = modelName;

        if (inheritFrom != null)
        {
            session["InheritFrom"] = inheritFrom;
        }

        session["IsInternal"] = isInternal;
        session["ParentIsInternal"] = parentIsInternal;
        session["HasClient"] = hasClient;
        session["Members"] = members;
        
        sessionHost.Session = session;

        var engine = new Engine();
        string result = engine.ProcessTemplate(includeContent, this.Host);

        return result;
    }
#>
