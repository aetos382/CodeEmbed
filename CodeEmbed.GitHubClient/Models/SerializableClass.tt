<#@ template debug="false" hostspecific="false" language="C#" #>

<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>

<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>

<#@ parameter name="CodeNamespace" type="System.String" #>
<#@ parameter name="ModelDefinitionXml" type="System.String" #>
<#@ parameter name="ParentModelDefinitionXmls" type="System.String[]" #>

<#@ include file="ModelGeneratorTool.ttinclude" #>

<#
    var modelDefinition = XElement.Parse(ModelDefinitionXml);

    string modelName = (string)modelDefinition.Attribute("name");
    string inherits = (string)modelDefinition.Attribute("inherits");

    var members = MemberDefinition.ParseModel(modelDefinition);

	var parentMembers =
		ParentModelDefinitionXmls
			.Select(XElement.Parse)
			.Reverse()
			.SelectMany(x => MemberDefinition.ParseModel(x))
			.ToArray();

    bool hasRequiredMember = members.Any(x => x.Required);

    string constructorParameters = string.Join(
        ",\r\n",
        members.Select(x => string.Format("\t\t\t{0} {1}", x.Type, x.CamelCasedName)));

	string parentConstructorParameters = string.Join(
        ",\r\n",
        parentMembers.Select(x => string.Format("\t\t\t{0} {1}", x.Type, x.CamelCasedName)));

	string parentConstructorArguments = string.Join(
        ",\r\n",
        parentMembers.Select(x => string.Format("\t\t\t\t{0}", x.CamelCasedName)));
#>

namespace <#= CodeNamespace #>.Models.Serialization
{
	using System;
	using System.CodeDom.Compiler;
<#
	if (hasRequiredMember)
	{
#>
	using System.ComponentModel;
<#
	}
#>
	using System.Diagnostics;
	using System.Diagnostics.Contracts;

	using Newtonsoft.Json;
	
	using <#= CodeNamespace #>.Models;

	[GeneratedCode("SerializableClass.tt", "1.0")]
	[DebuggerStepThrough]
	[JsonObject]
	public class Serializable<#= modelName #><#= GeneratedModelPrefix #> :
<#
    if (inherits != null)
    {
#>
		Serializable<#= inherits #><#= GeneratedModelPrefix #>,
<#
    }
#>
		I<#= modelName #><#= GeneratedModelPrefix #>
	{
<#
foreach (var member in members)
{
#>
		[ContractPublicPropertyName("<#= member.Name #>")]
		private readonly <#= member.Type #> _<#= member.CamelCasedName #>;

<#
}
#>
		[JsonConstructor]
		public Serializable<#= modelName #><#= GeneratedModelPrefix #>(
<#
if (inherits != null)
{
#>
<#= parentConstructorParameters #>,
<#
}
#>
<#= constructorParameters #>)
<#
    if (inherits != null)
    {
#>
			: base(
<#= parentConstructorArguments #>)
<#        
    }
#>
		{
<#
        foreach (var member in parentMembers.Where(x => x.Required))
        {
#>
			Contract.Requires<ArgumentNullException>(<#= member.CamelCasedName #> != null);
<#
        }
#>
<#
        foreach (var member in members.Where(x => x.Required))
        {
#>
			Contract.Requires<ArgumentNullException>(<#= member.CamelCasedName #> != null);
<#
        }
#>

<#
foreach (var member in members)
{
#>
			this._<#= member.CamelCasedName #> = <#= member.CamelCasedName #>;
<#
}
#>
		}

<#
	foreach (var member in members)
	{
#>
		[JsonProperty("<#= member.Json #>")]
		public <#= member.Type #> <#= member.Name #>
		{
			get
			{
				return this._<#= member.CamelCasedName #>;
			}
		}

<#
	}
#>
<#
	if (hasRequiredMember)
	{
#>
        [Conditional("CONTRACTS_FULL")]
        [EditorBrowsable(EditorBrowsableState.Never)]
        [ContractInvariantMethod]
        private void ObjectInvariant()
        {
<#
		foreach (var member in members.Where(x => x.Required))
		{

#>
			Contract.Invariant(this._<#= member.CamelCasedName #> != null);
<#
		}
#>
        }
<#
	}
#>
	}
}
