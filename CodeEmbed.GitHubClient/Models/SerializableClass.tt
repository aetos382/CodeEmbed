<#@ template debug="false" hostspecific="false" language="C#" #>

<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>

<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>

<#@ parameter name="CodeNamespace" type="System.String" #>
<#@ parameter name="ModelDefinitionXml" type="System.String" #>
<#@ parameter name="ParentModelDefinitionXmls" type="System.String[]" #>

<#@ include file="ModelGeneratorTool.tt" #>

<#
    var modelDefinition = XElement.Parse(ModelDefinitionXml);

    string modelName = (string)modelDefinition.Attribute("name");
    string inherits = (string)modelDefinition.Attribute("inherits");

    bool isInternal = (bool?)modelDefinition.Attribute("internal") ?? false;

    var members = modelDefinition.Descendants("Member").Select(
        x => new MemberDefinition
            {
                Name = x.Attribute("name").Value,
                Type = x.Attribute("type").Value,
                Json = x.Attribute("json").Value
            });

	var parentModelDefinitions = ParentModelDefinitionXmls.Select(XElement.Parse);

    bool parentIsInternal = false;

    var parentMembers = new MemberDefinition[0];

    if (parentModelDefinitions.Any())
    {
        parentIsInternal = (bool?)parentModelDefinitions.First().Attribute("internal") ?? false;

		parentMembers = parentModelDefinitions.Reverse().SelectMany(
			x => x.Descendants("Member")
				.Select(
					y => new MemberDefinition
					{
						Name = y.Attribute("name").Value,
						Type = y.Attribute("type").Value,
						Json = y.Attribute("json").Value
					})
			)
			.ToArray();
    }
#>

namespace <#= CodeNamespace #>.Models.Serialization
{
	using System;
	using System.CodeDom.Compiler;
	using System.Diagnostics;
	using System.Diagnostics.Contracts;

	using Newtonsoft.Json;
	
<#
if (isInternal || parentIsInternal)
{
#>
	using <#= CodeNamespace #>.Models.Internal;
<#
}
else
{
#>
	using <#= CodeNamespace #>.Models;
<#
}
#>

	[GeneratedCode("SerializableClass.tt", "1.0")]
	[DebuggerStepThrough]
	[JsonObject]
	public class Serializable<#= modelName #>Generated :
<#
    if (inherits != null)
    {
#>
		Serializable<#= inherits #>Generated,
<#
    }
#>
		I<#= modelName #>Generated
	{
<#
foreach (var member in members)
{
#>
		[ContractPublicPropertyName("<#= member.Name #>")]
		private readonly <#= member.Type #> _<#= ToCamelCase(member.Name) #>;
<#
}
#>

		[JsonConstructor]
		public Serializable<#= modelName #>Generated(
<#
foreach (var member in parentMembers)
{
#>
			<#= member.Type #> <#= ToCamelCase(member.Name) #>,
<#
}
#>
<#
foreach (var member in members.Take(members.Count() - 1))
{
#>
			<#= member.Type #> <#= ToCamelCase(member.Name) #>,
<#
}
#>
			<#= members.Last().Type #> <#= ToCamelCase(members.Last().Name) #>)
<#
    if (inherits != null)
    {
#>
			: base(
<#
        foreach (var member in parentMembers.Take(parentMembers.Length - 1))
        {
#>
				<#= ToCamelCase(member.Name) #>,
<#           
        }
#>
				<#= ToCamelCase(parentMembers.Last().Name) #>)
<#        
    }
#>
		{
<#
foreach (var member in members)
{
#>
			this._<#= ToCamelCase(member.Name) #> = <#= ToCamelCase(member.Name) #>;
<#
}
#>
		}

<#
	foreach (var member in members)
	{
#>
		[JsonProperty("<#= member.Json #>")]
		public <#= member.Type #> <#= member.Name #>
		{
			get
			{
				return this._<#= ToCamelCase(member.Name) #>;
			}
		}

<#
	}
#>
	}
}
