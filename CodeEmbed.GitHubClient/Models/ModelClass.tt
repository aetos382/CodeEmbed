<#@ template debug="false" hostspecific="false" language="C#" #>

<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>

<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>

<#@ parameter name="CodeNamespace" type="System.String" #>
<#@ parameter name="ModelDefinitionXml" type="System.String" #>
<#@ parameter name="ParentModelDefinitionXmls" type="System.String[]" #>

<#@ include file="ModelGeneratorTool.ttinclude" #>

<#
    var modelDefinition = XElement.Parse(ModelDefinitionXml);

    string modelName = (string)modelDefinition.Attribute("name");
    string inherits = (string)modelDefinition.Attribute("inherits");

    string camelCasedModelName = ToCamelCase(modelName);

    var members = MemberDefinition.ParseModel(modelDefinition);

    bool descendantHasClient = ParentModelDefinitionXmls.Select(x => (bool?)XElement.Parse(x).Attribute("hasClient") ?? false).Any(x => x);
    bool hasClient = !descendantHasClient && ((bool?)modelDefinition.Attribute("hasClient") ?? false);
#>

namespace <#= CodeNamespace #>.Models
{
	using System;
	using System.CodeDom.Compiler;
	using System.ComponentModel;
	using System.Diagnostics;
	using System.Diagnostics.Contracts;
	
<#
    if (hasClient || descendantHasClient)
    {
#>
	using <#= CodeNamespace #>;
<#    
    }
#>

	[GeneratedCode("ModelClass.tt", "1.0")]
	[DebuggerStepThrough]
	public class <#= modelName #><#= GeneratedModelPrefix #> :
<#
    if (inherits != null)
    {
#>
		<#= inherits #><#= GeneratedModelPrefix #>,
<#
    }
#>
		I<#= modelName #><#= GeneratedModelPrefix #>
	{
		private readonly I<#= modelName #><#= GeneratedModelPrefix #> _<#= camelCasedModelName #>;

<#
    if (hasClient)
    {
#>
		[ContractPublicPropertyName("Client")]
		private readonly IGitHubClient _client;

<#
    }
#>
		public <#= modelName #><#= GeneratedModelPrefix #>(
			I<#= modelName #><#= GeneratedModelPrefix #> <#= camelCasedModelName #><#= (hasClient || descendantHasClient ? "," : ")") #>
<#
    if (hasClient || descendantHasClient)
    {
#>
			IGitHubClient client)
<#
    }
#>
<#
    if (inherits != null)
    {
#>
			: base(
				<#= camelCasedModelName #><#= (descendantHasClient ? "," : ")") #>
<#
	if (descendantHasClient)
	{
#>
				client)
<#
	}
#>
<#
    }
#>
		{
			Contract.Requires<ArgumentNullException>(<#= camelCasedModelName #> != null);
<#
    if (hasClient || descendantHasClient)
    {
#>
			Contract.Requires<ArgumentNullException>(client != null);
<#
    }
#>

			this._<#= camelCasedModelName #> = <#= camelCasedModelName #>;
<#
    if (hasClient)
    {
#>

			this._client = client;
<#
    }
#>
		}

<#
	foreach (var member in members)
	{
#>
		public <#= member.Type #> <#= member.Name #>
		{
			get
			{
				return this._<#= camelCasedModelName #>.<#= member.Name #>;
			}
		}

<#
	}
#>
<#
    if (hasClient)
    {
#>
		public IGitHubClient Client
		{
			get
			{
				Contract.Ensures(Contract.Result<IGitHubClient>() != null);

				return this._client;
			}
		}

<#
    }
#>
        [Conditional("CONTRACTS_FULL")]
        [EditorBrowsable(EditorBrowsableState.Never)]
        [ContractInvariantMethod]
        private void ObjectInvariant()
        {
            Contract.Invariant(this._<#= camelCasedModelName #> != null);
<#
    if (hasClient)
    {
#>

			Contract.Invariant(this._client != null);
<#
    }
#>
        }
	}
}
