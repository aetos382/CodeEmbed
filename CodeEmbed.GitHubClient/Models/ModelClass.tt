<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>

<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>

<#@ include file="ModelGeneratorTool.tt" #>

<#@ parameter name="CodeNamespace" type="System.String" #>
<#@ parameter name="CustomUsings" type="System.Collections.Generic.IEnumerable<System.String>" #>
<#@ parameter name="ModelName" type="System.String" #>
<#@ parameter name="IsInternal" type="System.Boolean" #>
<#@ parameter name="Members" type="System.Collections.Generic.IEnumerable<Tuple<System.String, System.String, System.String, System.String>>" #>

<#
    string className = ModelName + "Generated";
	string interfaceName = "I" + ModelName + "Generated";
    string camelClassModelName = ToCamelCase(ModelName);
#>

<# if (IsInternal)
{
#>
namespace <#= CodeNamespace #>.Internal
<#
}
else
{
#>
namespace <#= CodeNamespace #>
<#
}
#>
{
	using System;
	using System.CodeDom.Compiler;
	using System.ComponentModel;
	using System.Diagnostics;
	using System.Diagnostics.Contracts;
	
<#
	if (CustomUsings != null)
	{
		foreach (string customUsing in CustomUsings)
		{
#>
	using <#= customUsing #>;
<#
		}
	}
#>

	[GeneratedCode("ModelClass.tt", "1.0")]
	public class <#= className #> :
		<#= interfaceName #>
	{
		private readonly <#= interfaceName #> _<#= camelClassModelName #>;

		public <#= className #>(
			<#= interfaceName #> <#= camelClassModelName #>)
		{
			this._<#= camelClassModelName #> = <#= camelClassModelName #>;
		}

<#
	foreach (var member in Members)
	{
#>
		public <#= member.Item2 #> <#= member.Item1 #>
		{
			get
			{
				return this._<#= camelClassModelName #>.<#= member.Item1 #>;
			}
		}

<#
	}
#>
        [Conditional("CONTRACTS_FULL")]
        [DebuggerStepThrough]
        [DebuggerHidden]
        [EditorBrowsable(EditorBrowsableState.Never)]
        [ContractInvariantMethod]
        private void ObjectInvariant()
        {
            Contract.Invariant(this._<#= camelClassModelName #> != null);
        }
	}
}
