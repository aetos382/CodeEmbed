<#@ template debug="false" hostspecific="false" language="C#" #>

<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>

<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>

<#@ parameter name="CodeNamespace" type="System.String" #>
<#@ parameter name="ModelDefinition" type="System.String" #>

<#@ include file="ModelDefinitionParser.ttinclude" #>

<#
    var model = Model.Parse(ModelDefinition);

    string modelName = model.Name.LocalName;

    string inherits = model.Inherits == null ? null : model.Inherits.LocalName;
    bool inherited = inherits != null;

    bool hasRequiredMember = model.Members.Any(x => x.Required);

    var namespaces = new List<string> {
            "System",
            "System.CodeDom.Compiler",
            "System.ComponentModel",
            "System.Diagnostics",
            "System.Diagnostics.Contracts",
            CodeNamespace
        };
    
	if (model.Members.Any(x => x.IsEnumerable || x.IsDictionary))
    {
		namespaces.Add("System.Linq");
    }

    var additionalNamespaces = model.Members
        .Select(x => x.Type.Namespace)
        .Distinct()
		.Select(x => GetClrNamespace(x))
        .Where(x => x != null);

    namespaces.AddRange(additionalNamespaces);

    var orderedNamespaces = OrderNamespace(namespaces);

    string camelCasedModelName = ToCamelCase(modelName);
#>

namespace <#= CodeNamespace #>.Models
{
<#
    foreach (var nss in orderedNamespaces)
    {
        foreach (var ns in nss)
        {
#>
    using <#= ns #>;
<#
        }
#>
    
<#
    }
#>
    [GeneratedCode("ModelClass.tt", "1.0")]
    [DebuggerStepThrough]
    public partial class <#= modelName #><#= GeneratedModelPostfix #> :
<#
    if (inherits != null)
    {
#>
        <#= inherits #><#= GeneratedModelPostfix #>,
<#
    }
#>
        I<#= modelName #><#= GeneratedModelPostfix #>
    {
        private readonly I<#= modelName #><#= GeneratedModelPostfix #> _<#= camelCasedModelName #> = null;
<#
    foreach (var member in model.Members.Where(x => x.IsModelType))
    {
#>

		[ContractPublicPropertyName("<#= member.Name #>")]
		private readonly <#= member.GetTypeName("") #> _<#= ToCamelCase(member.Name) #> = null;
<#
    }
#>
<#
    if (!inherited)
    {
#>

        [ContractPublicPropertyName("Client")]
        private readonly IGitHubClient _client = null;
<#
    }
#>

        /// <summary>Create new instance of <#= modelName #><#= GeneratedModelPostfix #>.</summary>
        public <#= modelName #><#= GeneratedModelPostfix #>(
            I<#= modelName #><#= GeneratedModelPostfix #> <#= camelCasedModelName #>,
            IGitHubClient client)
<#
    if (inherited)
    {
#>
            : base(
                <#= camelCasedModelName #>,
                client)
<#
    }
#>
        {
            Contract.Requires<ArgumentNullException>(<#= camelCasedModelName #> != null);

            Contract.Requires<ArgumentNullException>(client != null);

            this._<#= camelCasedModelName #> = <#= camelCasedModelName #>;
<#
    foreach (var member in model.Members.Where(x => x.IsModelType))
    {
#>

<#
		string indent = string.Empty;

		if (!member.Required)
        {
			indent = "    ";
#>
			if (<#= camelCasedModelName #>.<#= member.Name #> != null)
			{
<#
        }

		if (member.IsEnumerable)
        {
#>
			<#= indent #>this._<#= ToCamelCase(member.Name) #> = <#= camelCasedModelName #>.<#= member.Name #>.Select(x => new <#= member.ModelType.LocalName #>(x, client));
<#
        }
		else if (member.IsDictionary)
        {
#>
			<#= indent #>this._<#= ToCamelCase(member.Name) #> = <#= camelCasedModelName #>.<#= member.Name #>.ToDictionary(x => x.Key, x => new <#= member.ModelType.LocalName #>(x.Value, client));
<#
        }
		else
        {
#>
			<#= indent #>this._<#= ToCamelCase(member.Name) #> = new <#= member.GetTypeName("") #>(<#= camelCasedModelName #>.<#= member.Name #>, client);
<#
        }

		if (!member.Required)
        {
#>
			}
<#
        }
    }

	if (!inherited)
    {
#>

            this._client = client;
<#
    }
#>
        }
<#
    foreach (var member in model.Members)
    {
#>

        /// <summary>Map to "<#= member.Json #>"</summary>
        public <#= member.GetTypeName("") #> <#= member.Name #>
        {
            get
            {
<#
		if (member.IsModelType)
        {
			if (member.Required)
            {
#>
				Contract.Ensures(Contract.Result<<#= member.GetTypeName("") #>>() != null);

<#
            }
#>
				return this._<#= ToCamelCase(member.Name) #>;
<#
		}
		else
        {
#>
                return this._<#= camelCasedModelName #>.<#= member.Name #>;
<#
        }
#>
            }
        }
<#
    }

    foreach (var member in model.Members.Where(x => x.IsModelType))
    {
#>

        /// <summary>Map to "<#= member.Json #>"</summary>
        <#= member.GetTypeName("I") #> I<#= modelName #><#= GeneratedModelPostfix #>.<#= member.Name #>
        {
            get
            {
                return this._<#= camelCasedModelName #>.<#= member.Name #>;
            }
        }
<#
    }

    if (!inherited)
    {
#>

        public IGitHubClient Client
        {
            get
            {
                Contract.Ensures(Contract.Result<IGitHubClient>() != null);

                return this._client;
            }
        }
<#
    }
#>

        /// <summary>Specifies invariant contracts of object.</summary>
        [Conditional("CONTRACTS_FULL")]
        [EditorBrowsable(EditorBrowsableState.Never)]
        [ContractInvariantMethod]
        private void ObjectInvariant()
        {
            Contract.Invariant(this._<#= camelCasedModelName #> != null);
<#
    foreach (var member in model.Members.Where(x => x.IsModelType && x.Required))
    {
#>

			Contract.Invariant(this._<#= ToCamelCase(member.Name) #> != null);
<#
    }

	if (!inherited)
    {
#>

            Contract.Invariant(this._client != null);
<#
    }
#>
        }
    }
}
